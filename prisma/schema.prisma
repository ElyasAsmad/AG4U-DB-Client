generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  OrgID    Int        @id @default(autoincrement())
  OrgName  String
  Category Category[]
}

model Category {
  CategoryID   String        @id @default(uuid())
  CategoryName String
  OrgID        Int
  Branch       Branch[]
  Organization Organization  @relation(fields: [OrgID], references: [OrgID])
  Users        Users[]       @relation("AGStaffCategory")
  Subcategory  Subcategory[] @relation("CategoryToSubcategory")
}

model Subcategory {
  SubcategoryID   String           @id @default(uuid())
  SubcategoryName String
  AGClasses       AGClasses[]
  PortfolioAlbum  PortfolioAlbum[]
  Category        Category[]       @relation("CategoryToSubcategory")
}

model Branch {
  BranchID             String                 @id @default(uuid())
  BranchName           String
  CategoryID           String
  FAddressID           String?                @unique
  AGClasses            AGClasses[]
  Category             Category               @relation(fields: [CategoryID], references: [CategoryID])
  Address              Address?               @relation(fields: [FAddressID], references: [AddressID])
  BranchManagerCheckIn BranchManagerCheckIn[]
  Users                Users[]
  BranchEvents         EventsRSVP[]           @relation("InvitedBranches")

  @@index([BranchID], type: Hash)
}

model Address {
  AddressID String  @id @default(uuid())
  Address1  String
  Address2  String
  City      String
  State     String
  PostCode  String
  Branch    Branch?
}

model AGClasses {
  ClassID        String          @id @default(uuid())
  ClassName      String
  FBranchID      String?
  ClassTimes     Json
  FSubcategoryID String?         @map("fSubcategoryID")
  Branch         Branch?         @relation(fields: [FBranchID], references: [BranchID])
  Subcategory    Subcategory?    @relation(fields: [FSubcategoryID], references: [SubcategoryID])
  BranchPricing  BranchPricing[]
  AGFiles        AGFile[]        @relation("AGClassesToAGFiles")
  AGFolders      AGFolder[]      @relation("AGClassesToAGFolders")
  Portfolio      Portfolio[]     @relation("AGClassesToPortfolio")
  Students       Students[]      @relation("AGClassesToStudents")
  Teachers       Users[]         @relation("AGClassesToUsers")

  Announcement           Announcement[]
  EventsRSVPParticipants EventsRSVPParticipants[]

  @@index([FBranchID], name: "FBranchIDIndex")
  @@index([ClassID], type: Hash)
}

model Roles {
  RoleID   String  @id @default(uuid())
  RoleName String
  Status   String
  Users    Users[] @relation("RolesToUsers")

  AccessibleFiles   AGFile[]   @relation("FileAccessRoles")
  AccessibleFolders AGFolder[] @relation("FolderAccessRoles")

  Announcement Announcement[]
  EventsRSVP   EventsRSVP[]   @relation("InvitedRoles")

  @@index([RoleName])
}

model Users {
  UserID               String                 @id @unique
  FullName             String
  MobileNumber         String                 @unique
  EmailAddress         String
  ICNo                 String
  StaffCategory        String?
  Gender               String
  DOB                  DateTime
  Address1             String
  Address2             String?
  City                 String
  ZipCode              String
  State                String
  S_StartDate          DateTime?
  S_EndDate            DateTime?
  CreatedAt            DateTime               @default(now())
  Status               String
  IsMigrated           Boolean                @default(false)
  VehicleInfo          String
  OldStatus            String?
  branchBranchID       String?
  AGMedia              AGMedia[]              @relation("UploadedBy")
  ProfilePicture       AGMedia?               @relation("ProfilePicture")
  Announcement         Announcement[]
  BranchManagerCheckIn BranchManagerCheckIn[]

  AGFiles   AGFile[]
  AGFolders AGFolder[]

  DailyLogs          DailyLogs[]
  Messages           Messages[]
  OTPCodes           OTPCode[]
  TPortfolio         Portfolio[]
  Sessions           Session[]
  Token              Token[]
  Transactions       Transaction[]
  TransactionV2      TransactionV2[]
  Branch             Branch?                  @relation(fields: [branchBranchID], references: [BranchID])
  UsersAuth          UsersAuth?
  AGClasses          AGClasses[]              @relation("AGClassesToUsers")
  AGStaffCategory    Category[]               @relation("AGStaffCategory")
  Conversations      Conversations[]          @relation("ConversationsToUsers")
  Invoice            Invoice[]                @relation("InvoiceToUsers")
  Role               Roles[]                  @relation("RolesToUsers")
  Children           Students[]               @relation("StudentsToUsers")
  InvitedEvents      EventsRSVP[]             @relation("InvitedUsers")
  CreatedEvents      EventsRSVP[]
  EventsParticipated EventsRSVPParticipants[]

  AppAnalytics         AppAnalytics[]
  PasswordResetRequest PasswordResetRequest[]
  ModuleInteractions  ModuleInteractions[]

  Bills UserBills[]

  @@index([UserID], type: Hash)
  @@index([MobileNumber], type: Hash)
  @@index([EmailAddress])
}

model BranchManagerCheckIn {
  CheckInID  String    @id @default(uuid())
  CheckInAt  DateTime  @default(now())
  CheckOutAt DateTime?
  FUserID    String
  FBranchID  String
  Branch     Branch    @relation(fields: [FBranchID], references: [BranchID])
  Users      Users     @relation(fields: [FUserID], references: [UserID])
}

model Students {
  StudentID        String          @id @default(uuid())
  FullName         String
  DOB              DateTime
  EffectiveDate    DateTime
  ExpiryDate       DateTime
  Gender           String
  StudentCategory  String
  StudentIC        String
  Allergy          String
  Citizenship      String
  EmergencyContact String
  Immunization     String
  PickupPerson     String
  Status           String          @default("Registered")
  UpdatedAt        DateTime        @default(now())
  Address          String
  PictureURL       AGMedia?
  SubInvoice       SubInvoice[]
  Transactions     Transaction[]
  TransactionV2    TransactionV2[]
  AGClasses        AGClasses[]     @relation("AGClassesToStudents")
  DailyLogs        DailyLogs[]     @relation("DailyLogsToStudents")
  Portfolio        Portfolio[]     @relation("PortfolioToStudents")
  Parents          Users[]         @relation("StudentsToUsers")
  TaggedInImages   AGMedia[]       @relation("TaggedInImages")

  StuParticipatedEvents EventsRSVPParticipants[]

  @@index([StudentID], type: Hash)
}

model UsersAuth {
  AuthID   String  @id @default(uuid())
  UserID   String  @unique
  Password String
  FCMToken String?
  Users    Users   @relation(fields: [UserID], references: [UserID])
}

model Token {
  TokenID   String   @id @default(uuid())
  UserID    String
  Token     String
  ExpiresAt DateTime
  IssuedAt  DateTime @default(now())
  Type      String
  User      Users    @relation(fields: [UserID], references: [UserID])

  @@index([IssuedAt], type: Brin)
}

model DailyLogs {
  DLID          String        @id @default(uuid())
  Timestamp     DateTime      @default(now()) @db.Timestamptz(3)
  FDLTypeID     String        @unique
  FUserID       String
  Temperature   Float?
  FStudentID    String?
  TimePosted    DateTime?     @default(now()) @db.Timestamptz(3)
  Medias        AGMedia[]
  DailyLogsType DailyLogsType @relation(fields: [FDLTypeID], references: [DLTypeID])
  UploadedBy    Users         @relation(fields: [FUserID], references: [UserID])
  Students      Students[]    @relation("DailyLogsToStudents")

  @@index([DLID], type: Hash)
  @@index([Timestamp], type: Brin)
  @@index([Timestamp, DLID], type: BTree) // Composite index for efficient sorting and filtering
}

model DailyLogsType {
  DLTypeID    String     @id @default(uuid())
  Type        String
  Description String
  Content     Json
  DailyLogs   DailyLogs?

  @@index([Type])
}

model AGMedia {
  MediaID                    String          @id @default(uuid())
  MediaType                  String
  MediaURL                   String
  UploadedAt                 DateTime        @default(now())
  FPortfolioAlbumID          String?
  MediaKey                   String
  MediaSize                  Int?
  Hash                       String?
  FUserID                    String
  FDLID                      String?         @map("dailyLogsDLID")
  FUserProfilePicID          String?         @unique
  MediaDescription           String?
  FStudentID                 String?         @unique
  MediaState                 String          @default("PENDING")

  BlurHash                   String?
  announcementAnnouncementID String?
  Portfolio                  Portfolio?      @relation(fields: [FPortfolioAlbumID], references: [PortfolioID])
  Student                    Students?       @relation(fields: [FStudentID], references: [StudentID])
  UploadedBy                 Users           @relation("UploadedBy", fields: [FUserID], references: [UserID])
  ProfilePicture             Users?          @relation("ProfilePicture", fields: [FUserProfilePicID], references: [UserID])
  Announcement               Announcement?   @relation(fields: [announcementAnnouncementID], references: [AnnouncementID])
  DailyLogs                  DailyLogs?      @relation(fields: [FDLID], references: [DLID])
  PortfolioAlbum             PortfolioAlbum?
  TaggedStudents             Students[]      @relation("TaggedInImages")

  EventsRSVP EventsRSVP[]

  @@index([MediaState], name: "MediaStateIndex")
  @@index([MediaID], type: Hash)
  @@index([FDLID, MediaState]) // Composite index for media state filtering
}

model PortfolioAlbum {
  AlbumID             String      @id @default(uuid())
  AlbumName           String
  AlbumDescription    String
  AlbumDate           DateTime    @default(now())
  AlbumCoverMediaID   String?     @unique
  FAlbumSubcategoryID String      @map("FAlbumSubcategoryID")
  Portfolio           Portfolio[]
  AlbumCover          AGMedia?    @relation(fields: [AlbumCoverMediaID], references: [MediaID])
  AlbumSubcategory    Subcategory @relation(fields: [FAlbumSubcategoryID], references: [SubcategoryID])

  @@index([AlbumID], type: Hash)
}

model Portfolio {
  PortfolioID    String          @id @default(uuid())
  Description    String
  Timestamp      DateTime        @default(now())
  AlbumID        String?
  FTeacherID     String?
  FClassID       String?
  Medias         AGMedia[]
  PortfolioAlbum PortfolioAlbum? @relation(fields: [AlbumID], references: [AlbumID])
  Teachers       Users?          @relation(fields: [FTeacherID], references: [UserID])
  TaggedClasses  AGClasses[]     @relation("AGClassesToPortfolio")
  Students       Students[]      @relation("PortfolioToStudents")

  @@index([PortfolioID], type: Hash)
}

model Conversations {
  ConversationID    String     @id @default(uuid())
  ConversationState String     @default("ACTIVE")
  Messages          Messages[]
  Users             Users[]    @relation("ConversationsToUsers")

  @@index([ConversationID], type: Hash)
}

model Messages {
  MessageID        String        @id @default(uuid())
  MessageContent   String
  MessageReference String?
  Timestamp        DateTime      @default(now())
  FUserID          String
  FConversationID  String
  MessageState     String        @default("DELIVERED")
  MessageClientID  String?
  Conversations    Conversations @relation(fields: [FConversationID], references: [ConversationID])
  Users            Users         @relation(fields: [FUserID], references: [UserID])

  @@index([FConversationID], type: Hash)
  @@index([Timestamp], type: Brin)
}

model AccountDeleteRequest {
  RequestID   String    @id @default(uuid())
  UserID      String
  Reason      String
  Status      String
  RequestedAt DateTime  @default(now())
  DeletedAt   DateTime?
}

model BranchPricing {
  PricingID   String    @id @default(uuid())
  PricingType String
  Pricing     Float
  Status      String
  CreatedAt   DateTime  @default(now())
  UpdatedAt   DateTime  @default(now())
  FClassID    String
  AGClasses   AGClasses @relation(fields: [FClassID], references: [ClassID])
}

model Invoice {
  InvoiceID     String          @id @default(uuid())
  InvoiceNo     String
  Description   String
  PaymentType   String
  IssuedAt      DateTime        @default(now())
  DueAt         DateTime
  SubInvoice    SubInvoice[]
  Transaction   Transaction[]   @relation("InvoiceToTransaction")
  TransactionV2 TransactionV2[] @relation("InvoiceToTransactionV2")
  Users         Users[]         @relation("InvoiceToUsers")

  @@index([InvoiceID], type: Hash)
}

model SubInvoice {
  SubinvoiceID               String         @id @default(uuid())
  Amount                     Float
  Status                     String         @default("PENDING")
  studentsStudentID          String
  invoiceInvoiceID           String?
  transactionV2TransactionID Int?
  Invoice                    Invoice?       @relation(fields: [invoiceInvoiceID], references: [InvoiceID])
  Student                    Students       @relation(fields: [studentsStudentID], references: [StudentID])
  TransactionV2              TransactionV2? @relation(fields: [transactionV2TransactionID], references: [TransactionID])

  EventsRSVP EventsRSVP[]

  UserBills UserBills[]

  @@index([SubinvoiceID], type: Hash)
}

model Transaction {
  Name            String
  Email           String
  PhoneNumber     String
  Desc            String
  Type            String
  Method          String
  UniqueKey       String
  RefNo           String
  InvoiceNo       String
  Amount          Float
  Status          String
  CreatedDateTime DateTime  @default(now())
  PaymentLink     String
  FUserID         String?   @map("FUserID")
  StudentID       String?
  AGInvoiceNo     String?   @unique
  TransactionID   Int       @id @default(autoincrement())
  Users           Users?    @relation(fields: [FUserID], references: [UserID])
  Students        Students? @relation(fields: [StudentID], references: [StudentID])
  Invoice         Invoice[] @relation("InvoiceToTransaction")

  @@index([RefNo])
}

model TransactionV2 {
  TransactionID   Int          @id @default(autoincrement())
  RefNo           String
  Name            String
  Email           String?
  PhoneNumber     String?
  Desc            String
  Type            String
  Method          String
  UniqueKey       String
  InvoiceNo       String
  Amount          Float
  Status          String
  CreatedDateTime DateTime     @default(now())
  PaymentLink     String
  StudentID       String?
  AGInvoiceNo     String?      @unique
  FUserID         String?      @map("FUserID")
  SubInvoice      SubInvoice[]
  Users           Users?       @relation(fields: [FUserID], references: [UserID])
  Students        Students?    @relation(fields: [StudentID], references: [StudentID])
  Invoice         Invoice[]    @relation("InvoiceToTransactionV2")
}

model Announcement {
  AnnouncementID String      @id @default(uuid())
  Title          String
  Description    String
  CreatedAt      DateTime    @default(now())
  UpdatedAt      DateTime    @default(now())
  Status         String      @default("ACTIVE")
  TimePosted     DateTime    @default(now())
  usersUserID    String?
  Medias         AGMedia[]
  Classes        AGClasses[]
  Roles          Roles[]
  PostedBy       Users?      @relation(fields: [usersUserID], references: [UserID])

  ModuleInteractions ModuleInteractions[]

  @@index([AnnouncementID], type: Hash)
}

model OTPCode {
  id          Int      @id @default(autoincrement())
  OTPCode     String
  PhoneNumber String
  UserID      String?
  CreatedAt   DateTime @default(now())
  ExpiresAt   DateTime
  OTPRef      String
  Users       Users?   @relation(fields: [UserID], references: [UserID])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  token     String?
  users     Users    @relation(fields: [userId], references: [UserID], onDelete: Cascade)
}

model AGFile {
  FileId   String  @id @default(uuid())
  FileName String
  FileURL  String
  FileType String
  FileKey  String
  FileHash String?
  Size     Int?
  MimeType String?

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @default(now())

  UserID String
  Owner  Users  @relation(fields: [UserID], references: [UserID])

  FolderId String?
  Folder   AGFolder? @relation(fields: [FolderId], references: [FolderId])

  Classes AGClasses[] @relation("AGClassesToAGFiles")

  AccessibleByRoles Roles[] @relation("FileAccessRoles")

  @@index([FileId], type: Hash)
}

model AGFolder {
  FolderId   String @id @default(uuid())
  FolderName String

  Files AGFile[]

  ParentFolderId String?
  ParentFolder   AGFolder?  @relation("SubFolders", fields: [ParentFolderId], references: [FolderId])
  subFolders     AGFolder[] @relation("SubFolders")

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @default(now())
  Path      String

  UserID String
  Owner  Users  @relation(fields: [UserID], references: [UserID])

  Classes AGClasses[] @relation("AGClassesToAGFolders")

  AccessibleByRoles Roles[] @relation("FolderAccessRoles")
  // users Users @relation(references: [UserID], fields: [userId], onDelete: Cascade)

  @@index([FolderId], type: Hash)
  @@index([ParentFolderId], type: Hash)
}

model AppAnalytics {
  id              Int       @id @default(autoincrement())
  uid             String?
  version         String
  buildNumber     String
  platform        String
  platformVersion String
  deviceModel     String?
  sessionDuration Int?
  networkType     String?
  language        String?
  country         String?
  lastUpdateDate  DateTime?
  appLaunchCount  Int?
  timestamp       DateTime  @default(now())

  Users Users? @relation(fields: [uid], references: [UserID])

  @@map("app_analytics")
}

model AppVersions {
  id          Int      @id @default(autoincrement())
  version     String
  buildNumber String
  releasedAt  DateTime @default(now())
}

model PasswordResetRequest {
  id        String    @id @default(uuid())
  userId    String
  token     String
  issuedAt  DateTime
  expiresAt DateTime
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  ipAddress String?
  userAgent String?

  users Users @relation(references: [UserID], fields: [userId], onDelete: Cascade)

  @@map("password_reset_requests")
}

model EventsRSVP {
  eventId                  String    @id @default(uuid())
  eventName                String
  eventDescription         String
  eventStart               DateTime
  eventEnd                 DateTime
  eventLocation            String
  eventLocationState       String
  eventLat                 Float?
  eventLng                 Float?
  eventFee                 Float?
  eventMedia               AGMedia[]
  invitedUsers             Users[]   @relation("InvitedUsers")
  invitedRoles             Roles[]   @relation("InvitedRoles")
  invitedBranches          Branch[]  @relation("InvitedBranches")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @default(now())
  customNegativeButtonText String?
  customPositiveButtonText String?

  createdByID String
  createdBy   Users  @relation(fields: [createdByID], references: [UserID])

  subInvoice SubInvoice[]

  EventsRSVPParticipants EventsRSVPParticipants[]
}

model EventsRSVPParticipants {
  id                String     @id @default(uuid())
  eventId           String
  userId            String
  status            String     @default("PENDING") // PENDING, ACCEPTED, REJECTED
  rejectedReason    String?
  children          Students[] // which children are attending
  otherParticipants Json? // other participants
  createdAt         DateTime   @default(now())

  classID     String?
  targetClass AGClasses? @relation(fields: [classID], references: [ClassID])

  event EventsRSVP @relation(fields: [eventId], references: [eventId])
  user  Users      @relation(fields: [userId], references: [UserID])
}

model UserBills {
  billId            String   @id
  collectionId      String   @map("collection_id")
  paid              Boolean  @default(false)
  state             String
  amount            Int
  paidAmount        Int      @map("paid_amount")
  dueAt             String
  email             String
  mobile            String?
  name              String
  url               String
  paidAt            String?  @map("paid_at")
  transactionId     String?  @map("transaction_id")
  transactionStatus String?  @map("transaction_status")
  xSignature        String?  @map("x_signature")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  ref1Label String? @map("ref1_label")
  ref1      String?
  ref2Label String? @map("ref2_label")
  ref2      String?

  userId String
  user   Users  @relation(fields: [userId], references: [UserID])

  subInvoice SubInvoice[]

  @@map("user_bills")
}

model ModuleInteractions {
  id              Int      @id @default(autoincrement())
  interactionType String   @map("interaction_type")
  createdAt          DateTime  @default(now()) @db.Timestamptz(3) @map("created_at")
  updatedAt          DateTime  @updatedAt @db.Timestamptz(3) @map("updated_at")
  expiresAt          DateTime? @db.Timestamptz(3) @map("expires_at")

  fAnnouncementID String?       @map("f_announcement_id")
  Announcement    Announcement? @relation(fields: [fAnnouncementID], references: [AnnouncementID])

  metadata Json?

  userId String? @map("user_id")
  Users  Users?  @relation(fields: [userId], references: [UserID])
  @@map("module_analytics")

  // @@unique([id, userId, interactionType])
  // @@index([fAnnouncementID])
  // @@index([userId])
  // @@index([createdAt])
}

model IotDevices {
  id          String      @id @default(uuid())
  deviceName  String
  deviceType  String // e.g. beacon, camera, etc
  deviceState String     @default("ACTIVE")
  macAddress  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model PaymentMethodCategory {
//   id        Int             @id @default(autoincrement())
//   name      String
//   iconUrl   String
//   methods   PaymentMethod[]
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @updatedAt
// }

// model PaymentMethod {
//   paymentMethodID Int    @id @default(autoincrement())
//   name            String
//   code            String
//   iconUrl         String
//   processingFee   Float  @default(0)

//   category PaymentMethodCategory @relation(fields: [paymentMethodID], references: [id])
// }
